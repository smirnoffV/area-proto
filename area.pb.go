// Code generated by protoc-gen-go. DO NOT EDIT.
// source: area.proto

package area

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SquareRequest struct {
	Side                 float64  `protobuf:"fixed64,1,opt,name=Side,proto3" json:"Side,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRequest) Reset()         { *m = SquareRequest{} }
func (m *SquareRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRequest) ProtoMessage()    {}
func (*SquareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d14b2d06184cbd, []int{0}
}

func (m *SquareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRequest.Unmarshal(m, b)
}
func (m *SquareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRequest.Marshal(b, m, deterministic)
}
func (m *SquareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRequest.Merge(m, src)
}
func (m *SquareRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRequest.Size(m)
}
func (m *SquareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRequest proto.InternalMessageInfo

func (m *SquareRequest) GetSide() float64 {
	if m != nil {
		return m.Side
	}
	return 0
}

type RectangleRequest struct {
	Width                float64  `protobuf:"fixed64,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height               float64  `protobuf:"fixed64,2,opt,name=Height,proto3" json:"Height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RectangleRequest) Reset()         { *m = RectangleRequest{} }
func (m *RectangleRequest) String() string { return proto.CompactTextString(m) }
func (*RectangleRequest) ProtoMessage()    {}
func (*RectangleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d14b2d06184cbd, []int{1}
}

func (m *RectangleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RectangleRequest.Unmarshal(m, b)
}
func (m *RectangleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RectangleRequest.Marshal(b, m, deterministic)
}
func (m *RectangleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectangleRequest.Merge(m, src)
}
func (m *RectangleRequest) XXX_Size() int {
	return xxx_messageInfo_RectangleRequest.Size(m)
}
func (m *RectangleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RectangleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RectangleRequest proto.InternalMessageInfo

func (m *RectangleRequest) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *RectangleRequest) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type CircleRequest struct {
	Radius               float64  `protobuf:"fixed64,1,opt,name=Radius,proto3" json:"Radius,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CircleRequest) Reset()         { *m = CircleRequest{} }
func (m *CircleRequest) String() string { return proto.CompactTextString(m) }
func (*CircleRequest) ProtoMessage()    {}
func (*CircleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d14b2d06184cbd, []int{2}
}

func (m *CircleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircleRequest.Unmarshal(m, b)
}
func (m *CircleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircleRequest.Marshal(b, m, deterministic)
}
func (m *CircleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircleRequest.Merge(m, src)
}
func (m *CircleRequest) XXX_Size() int {
	return xxx_messageInfo_CircleRequest.Size(m)
}
func (m *CircleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CircleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CircleRequest proto.InternalMessageInfo

func (m *CircleRequest) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type Result struct {
	Area                 float64  `protobuf:"fixed64,1,opt,name=Area,proto3" json:"Area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4d14b2d06184cbd, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetArea() float64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func init() {
	proto.RegisterType((*SquareRequest)(nil), "SquareRequest")
	proto.RegisterType((*RectangleRequest)(nil), "RectangleRequest")
	proto.RegisterType((*CircleRequest)(nil), "CircleRequest")
	proto.RegisterType((*Result)(nil), "Result")
}

func init() { proto.RegisterFile("area.proto", fileDescriptor_e4d14b2d06184cbd) }

var fileDescriptor_e4d14b2d06184cbd = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x8b, 0x83, 0x30,
	0x10, 0x85, 0x71, 0xd9, 0xcd, 0xb2, 0x03, 0xca, 0x6e, 0x58, 0x44, 0x96, 0x3d, 0xd4, 0xf4, 0x60,
	0x4f, 0x39, 0xb4, 0x7f, 0xa0, 0xa5, 0x97, 0x9e, 0xe3, 0xa1, 0xe7, 0x54, 0x07, 0x0d, 0x48, 0xad,
	0x31, 0xf9, 0xff, 0xa5, 0x49, 0xaa, 0xd8, 0xdb, 0xbc, 0xc7, 0xf7, 0xe0, 0x63, 0x00, 0xa4, 0x46,
	0xc9, 0x6f, 0xba, 0x37, 0x3d, 0x5b, 0x43, 0x5c, 0x0e, 0x56, 0x6a, 0x14, 0x38, 0x58, 0x1c, 0x0d,
	0xa5, 0xf0, 0x5e, 0xaa, 0x1a, 0xb3, 0x68, 0x15, 0x6d, 0x22, 0xe1, 0x6e, 0xb6, 0x87, 0x6f, 0x81,
	0x95, 0x91, 0xd7, 0xa6, 0x9b, 0xb8, 0x5f, 0xf8, 0x38, 0xab, 0xda, 0xb4, 0x01, 0xf4, 0x81, 0xa6,
	0x40, 0x4e, 0xa8, 0x9a, 0xd6, 0x64, 0x6f, 0xae, 0x0e, 0x89, 0x15, 0x10, 0x1f, 0x95, 0xae, 0xe6,
	0x79, 0x0a, 0x44, 0xc8, 0x5a, 0xd9, 0x31, 0xec, 0x43, 0x62, 0xff, 0x40, 0x04, 0x8e, 0xb6, 0x73,
	0x22, 0x07, 0x8d, 0xf2, 0x29, 0xf2, 0xb8, 0xb7, 0xd6, 0x77, 0x34, 0x07, 0xe2, 0xad, 0x69, 0xc2,
	0x17, 0xfa, 0x7f, 0x9f, 0x3c, 0xcc, 0x0b, 0xf8, 0x9a, 0x9c, 0xe9, 0x0f, 0x7f, 0xf5, 0x9f, 0xc1,
	0x1c, 0x88, 0x57, 0xa3, 0x09, 0x5f, 0x38, 0x4e, 0xc8, 0x85, 0xb8, 0x5f, 0xed, 0xee, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x1e, 0x0f, 0x8e, 0xe5, 0x39, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AreaClient is the client API for Area service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AreaClient interface {
	Square(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*Result, error)
	Rectangle(ctx context.Context, in *RectangleRequest, opts ...grpc.CallOption) (*Result, error)
	Circle(ctx context.Context, in *CircleRequest, opts ...grpc.CallOption) (*Result, error)
}

type areaClient struct {
	cc *grpc.ClientConn
}

func NewAreaClient(cc *grpc.ClientConn) AreaClient {
	return &areaClient{cc}
}

func (c *areaClient) Square(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Area/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) Rectangle(ctx context.Context, in *RectangleRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Area/Rectangle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) Circle(ctx context.Context, in *CircleRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Area/Circle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaServer is the server API for Area service.
type AreaServer interface {
	Square(context.Context, *SquareRequest) (*Result, error)
	Rectangle(context.Context, *RectangleRequest) (*Result, error)
	Circle(context.Context, *CircleRequest) (*Result, error)
}

// UnimplementedAreaServer can be embedded to have forward compatible implementations.
type UnimplementedAreaServer struct {
}

func (*UnimplementedAreaServer) Square(ctx context.Context, req *SquareRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (*UnimplementedAreaServer) Rectangle(ctx context.Context, req *RectangleRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rectangle not implemented")
}
func (*UnimplementedAreaServer) Circle(ctx context.Context, req *CircleRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Circle not implemented")
}

func RegisterAreaServer(s *grpc.Server, srv AreaServer) {
	s.RegisterService(&_Area_serviceDesc, srv)
}

func _Area_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Area/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Square(ctx, req.(*SquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_Rectangle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RectangleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Rectangle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Area/Rectangle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Rectangle(ctx, req.(*RectangleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_Circle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Circle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Area/Circle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Circle(ctx, req.(*CircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Area_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Area",
	HandlerType: (*AreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Square",
			Handler:    _Area_Square_Handler,
		},
		{
			MethodName: "Rectangle",
			Handler:    _Area_Rectangle_Handler,
		},
		{
			MethodName: "Circle",
			Handler:    _Area_Circle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "area.proto",
}
